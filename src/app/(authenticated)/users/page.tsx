"use client";

import './user.scss';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSquare, faCheckSquare, faStar, faStarHalfAlt} from '@fortawesome/free-regular-svg-icons';

import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
library.add(fas);

import { useEffect, useState } from 'react';
import { IUser } from '@/app/interfaces/user.interface';
import ModalForm from '../../../../components/modalForm/modalForm';

// export const metadata = {
//   title: 'Equipe | TasksFor',
//   description: 'Generated by create next app',
// }

export default function UsersPage() {

  const currentUserId = localStorage.getItem('uid');
  const pathApi = '/api/user/user-controller'

  const [lstUser, setLstUser] = useState<IUser[]>([]);
  const [user, setUser] = useState<IUser>();
  const [confirmDelete, setConfirmDelete] = useState('');
  const [typeForm, setTypeForm] = useState('');
  const [isModalActive, setIsModalActive] = useState(false);
  const [modalTitle, setModalTitle] = useState('');

  useEffect(() => {
    getAllUsers();
  }, []);

  async function getAllUsers() {
    console.log('getAllUsers')
    clearStateUser();
    await fetch(`${pathApi}?idMaster=${currentUserId}`)
      .then((res) => res.json())
      .then((data) => {
        setLstUser(data);
      })
  }

  async function createUser(users: IUser) {
    const requestOptions = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json'},
      body: JSON.stringify(users)
    };

    await fetch(pathApi, requestOptions)
    .then(data => console.log("Create - User") )
    .finally(() => {
      getAllUsers();
      showModal();
      console.log('finally')
    });
  }

  async function updateUser(user: IUser) {
    const requestOptions = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(user)
    };

    await fetch(`${pathApi}?id=${user.id}`, requestOptions)
      .then(() => console.log("update - users") )
      .finally(() => {
        getAllUsers();
        showModal();
      });
  }

  async function deleteUser(id: string) {
    const requestOptions = {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
    };

    await fetch(`${pathApi}?id=${id}`, requestOptions)
      .then(() => console.log("Delete - User") )
      .finally(() => {
        getAllUsers();
      });
  }

  function showModal() {
    setIsModalActive(!isModalActive);
  }

  function submit(e: any) {
    e.preventDefault();
    actionSubmit(user);
  }

  function actionSubmit(user: any) {
    switch (typeForm) {
      case 'create':
        user.idMaster = currentUserId;
        createUser(user);
        break;
      case 'update':
        updateUser(user);
        break;
      default:
        break;
    }
  }

  function prepareCreate() {
    clearStateUser();
    setTypeForm('create');
    setModalTitle('Novo Usuário');
    showModal();
  }

  function prepareUpdate(user: IUser) {
    setUser(user)
    setTypeForm('update');
    setModalTitle('Editar Usuário');
    showModal();
  }

  function clearStateUser() {
    setUser({
      id: '',
      name: '',
      email: '',
      password: '',
      sector: '',
      role: '',
    })
  }
  
  return (
    <>
      <section className="container-title">
        <h2>Sua Equipe</h2>
        <button onClick={prepareCreate}>
          <FontAwesomeIcon icon="plus"/>
        </button>
      </section>

      <section className="container-list-user">
        {lstUser?.length > 0 ? (
            lstUser.map((user: IUser) => (
              <div key={user.id} className="box-card">
                <div className="card-info">
                  <p>
                    <span>{user.name}</span> 
                    {user.id === currentUserId && <FontAwesomeIcon icon={faStarHalfAlt}/>}
                  </p>
                  <p><strong>• Email:</strong>{user.email}</p>
                  <p><strong>• Setor:</strong>{user.sector}</p>
                  <p><strong>• Permissão:</strong>{user.role}</p>
                  <p>
                    <strong>• Tarefas:</strong> 
                    <span>
                      <FontAwesomeIcon icon={faSquare}/>
                      <span>10</span>
                    </span>
                    <span>
                      <FontAwesomeIcon icon={faCheckSquare}/>
                      <span>10</span>
                    </span>
                  </p>
                </div>
                <div className="card-actions">
                  { confirmDelete === user.id &&
                    <>
                      <button onClick={() => deleteUser(user.id!)} className="btn-confirm">Confirmar</button>
                      <button onClick={() => setConfirmDelete('')}>Cancelar</button>
                    </>
                  }
                  { confirmDelete != user.id &&
                    <>
                      <button onClick={() => setConfirmDelete(user.id!)}>Excluir Usuário</button>
                      <button onClick={() => prepareUpdate(user)}>Editar Usuário</button>
                    </>
                  }
                </div>
              </div>
            ))
          ) : (
            <p>Nenhum usuário encontrado.</p>
          )}
      </section>

      <ModalForm
        className="modal"
        title={modalTitle}
        hidden={isModalActive}
        showModal={showModal}
        submit={submit}
        user={user}
        setUser={setUser}
        typeForm={typeForm}
      >
      </ModalForm>
    </>
  )
}