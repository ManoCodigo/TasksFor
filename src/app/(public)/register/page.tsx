"use client";

import "../login-register.scss";
import "../../globals.scss";
import { useRouter } from "next/navigation";
import { useState } from "react";

import { auth, firestore } from "../../../../services/firebase";
import { APP_ROUTES } from "@/constants/app-routes";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { setDoc, doc, collection } from "firebase/firestore";

// export const metadata = {
//   title: 'Login | TasksFor',
//   description: 'Generated by create next app',
// }

export default function RegisterPage() {
  const router = useRouter();

  const [loading, setloading] = useState(false);
  const [nameMsgError, setNameMsgError] = useState('');
  const [emailMsgError, setEmailMsgError] = useState('');
  const [emailMsgPassword, setEmailMsgPassword] = useState('');
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const userRef = collection(firestore, 'users');

  async function register() {
    setloading(true);

    if(name.trim()) {
      setNameMsgError('');
      createUserWithEmailAndPassword(auth, email, password)
      .then(async (userCredential) => {
        const uid = userCredential.user?.uid || '';
        
        await setDoc(doc(userRef, uid), {
          email: email,
          name: name,
          role: 'adm',
        });
        localStorage.setItem('uid', uid);
  
        router.push(APP_ROUTES.private.home);
      }).catch(err => {
        console.log('error REGISTER >> ', err);
  
        err.code === 'auth/invalid-email' ? setEmailMsgError(err.message) : setEmailMsgError('');
        err.code === 'auth/weak-password' ? setEmailMsgPassword(err.message) : setEmailMsgPassword('');
      }).finally(() => setloading(false));
    } else {
      setNameMsgError('Name cannot be empty');
      setloading(false);
    }
  }

  return (
    <>
      <section>
        <form onSubmit={(e) => {register(), e.preventDefault()} }>
          <div className="form-container">
            <h1>REGISTER</h1>
            <div className="form-login">
              <div className="group-input">
                <label>Name:</label>
                <input type="text" onChange={(name) => setName(name.target.value)}/>
                { nameMsgError && 
                  <small className="form-error">{ nameMsgError }</small>
                }
              </div>
              <div className="group-input">
                <label>Email:</label>
                <input type="email" onChange={(email) => setEmail(email.target.value)}/>
                { emailMsgError && 
                  <small className="form-error">{ emailMsgError }</small>
                }
              </div>
              <div className="group-input">
                <label>Senha:</label>
                <input type="password" onChange={(password) => setPassword(password.target.value)}/>
                { emailMsgPassword &&
                  <small className="form-error">{ emailMsgPassword }</small>
                }
              </div>
            </div>
            <p onClick={(e)=> { router.push(APP_ROUTES.public.login), e.preventDefault() }}>Logar com uma conta</p> 
          </div>
          <button type="submit" disabled={ loading }>Cadastrar</button>
        </form>
      </section>
    </>
  );
}
